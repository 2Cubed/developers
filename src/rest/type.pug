include ../mixins.pug

mixin type(key, type, skipRequired)
    h4 Type:
        = ' '
        strong= type.type
        if type.repeat
            span.help(title='List') []

mixin typeNameString(type)
    -
        var name = Array.isArray(type.type) ? type.type[0] : type.type;
        var isArray = false;
        if (name.slice(-2) === '[]') {
            isArray = true;
            name = name.slice(0, -2);
        }

    if type.default
        | [
    if isArray
        | Array&lt;
    if type.enum
        if rest.types[name]
            a(href=`#${name}`)= name
        else
            = name
        | (#{type.enum.join(', ')})
        if type.default
            span.help(title='Default Value')= `=${type.default}`
    else
        if type.minimum
            span.help(title='Min value')= type.minimum
            | &leq;
        if rest.types[name]
            a(href=`#${name}`)= name
        else
            = name
        if type.default
            | =
            span.help(title='Default Value')= type.default
        if type.maximum
            | &leq;
            span.help(title='Max value')= type.maximum
        if type.default
            | ]
    if isArray
        | &gt;
    if !type.default && !type.required
        span.help(title='Optional') ?
    if name === 'array' && type.items
        - var parentType = type.items.type && type.items.type[0];
        if parentType && !restUtil.isBaseType(parentType)
            = ' '
            small extends
                = ' '
                a(href=`#${parentType}`)= parentType
        | :
mixin typeExample(type)
    if typeof type.example === 'string'
        pre= type.example
    if typeof type.example === 'object'
        +highlightStr("json", JSON.stringify(type.example,null, 3))

mixin simpleTypeHeading(key,type)
    = restUtil.prettifyPropertyName(type.displayName || key)
    = ': '
    +typeNameString(type)

mixin describeSimpleType(key,type)
    if type.description
        if typeof type.description === 'string'
            | !{marked(type.description)}
    if type.schema
        p
            strong Schema
            | :
        pre
            code= type.schema
    if type.example
        p
            strong Example
            | :
            +typeExample(type)

mixin simpleType(key, type, skipRequired)
    +describeSimpleType(key,type)
    //- based on the type of the type we can choose how to render its additional properties
    - rootType = restUtil.getRootType(type)
    //- for strings check if we have min max and patterns
    if rootType === 'string' && (type.minLength || type.maxLength || type.pattern)
        //string
        ul
            if type.minLength
                li
                    span minLength: #{type.minLength}
            if type.maxLength
                li
                    span maxLength: #{type.maxLength}
            if type.pattern
                li
                    span pattern: #[pre.inline= type.pattern]
    //- For arrays display min max etc, if the items have properties
    //- display them using recursion
    else if rootType === 'array'
        //array
        ul
            if type.minItems
                li minItems: #{type.minItems}
            if type.maxItems
                li maxItems: #{type.maxItems}
            if type.uniqueItems
                li Items MUST be unique.
            li items
            if type.items.properties
                li
                    ul
                        for property, propertyName in type.items.properties
                            li
                                strong
                                    +simpleTypeHeading(propertyName,property)
                                +simpleType(propertyName, property)
    //- for objects nest them together
    else if rootType === 'object'
        if type.properties
            //nestin
            ul
                for property, propertyName in type.properties
                    li
                        strong
                            +simpleTypeHeading(propertyName,property)
                        +simpleType(propertyName, property)